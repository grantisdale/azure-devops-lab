variables:
  # NPM
  NODE_VERSION: 12.19.0
  NPM_CACHE_FOLDER: /home/vsts/.npm
  # Docker
  IMAGE_NAME: react-azure-lab
  DOCKERFILE_PATH: Dockerfile
  DOCKER_REGISTRY: grantacrlab1.azurecr.io
  DOCKER_REGISTRY_SERVICE_CONNECTION: ACRLab1Registry
  # K8s
  K8S_REPO_URL: https://github.com/grantisdale/k8s-azure-kustomize-lab.git
  K8S_REPO: k8s-azure-kustomize-lab
  K8S_DIRECTORY: react-azure-lab-deployment
  # Git
  GIT_AUTHOR_NAME: Grant
  GIT_COMMITTER_NAME: Grant
  GIT_AUTHOR_EMAIL: '44140736+grantisdale@users.noreply.github.com'
  GIT_COMMITTER_EMAIL: '44140736+grantisdale@users.noreply.github.com'

# Run for main & release branches
trigger:
  branches:
    include:
    - main
    - release/*

# Don't run for PRs
pr: none

stages:
- stage: Test
  jobs:
  - job: Test
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - task: Cache@2
        displayName: Cache .npm
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
            npm
          path: $(NPM_CACHE_FOLDER)
      - task: NodeTool@0
        inputs:
          versionSpec: '$(NODE_VERSION)'
        displayName: 'Install Node.js @ $(NODE_VERSION)'
      - task: Npm@1
        inputs:
          command: 'install'
        displayName: 'Npm Install'
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run lint'
        displayName: 'Lint the JS'
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test'
        displayName: 'Run Unit Tests'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'coverage/cobertura-coverage.xml'
        displayName: 'Publish Code Coverage to Azure DevOps'

- stage: Containerise
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - task: Docker@2
        inputs:
          command: build
          repository: $(IMAGE_NAME)
          dockerfile: $(DOCKERFILE_PATH)
          containerRegistry: '$(DOCKER_REGISTRY_SERVICE_CONNECTION)'
          tags: |
            $(Build.BuildId)
        displayName: Build Docker image
      - script: |
          docker save '$(DOCKER_REGISTRY)/$(IMAGE_NAME):$(Build.BuildId)' | gzip > '$(Build.ArtifactStagingDirectory)/$(IMAGE_NAME)-$(Build.BuildId).tar.gz'
        displayName: Archive Docker Image
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'docker-images'

- stage: Push_Image
  dependsOn:
    - Test
    - Containerise
  jobs:
  - job: Push_Image
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'docker-images'
          downloadPath: '$(Pipeline.Workspace)'
      - script: |
          docker load < $(Pipeline.Workspace)/docker-images/$(IMAGE_NAME)-$(Build.BuildId).tar.gz
        displayName: Load archived Docker Image
      - task: Docker@2
        inputs:
          command: push
          repository: '$(IMAGE_NAME)'
          containerRegistry: '$(DOCKER_REGISTRY_SERVICE_CONNECTION)'
          tags: |
            $(Build.BuildId)
        displayName: Push image to ACR

- stage: Deploy
  dependsOn:
    - Push_Image
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - script: |
          curl -s "https://raw.githubusercontent.com/\
          kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
        displayName: Install kustomize
      - script: |
          git clone '$(K8S_REPO_URL)'
        displayName: Get K8s Manifests
      - script: |
          cd '$(K8S_REPO)/$(K8S_DIRECTORY)'
          kustomize edit set image '$(DOCKER_REGISTRY)/$(IMAGE_NAME):$(Build.BuildId)'
          git add kustomization.yaml
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          git commit -m 'FROM AZURE PIPELINE: update kustomization.yaml for $(Build.Repository.Name). Build: $(Build.BuildId)'
          #git push
        displayName: Update Image Name & Deploy